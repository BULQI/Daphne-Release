<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abt.Controls.SciChart3D.Wpf</name>
    </assembly>
    <members>
        <member name="T:Abt.Controls.SciChart3D.Common.DataBinding.StringToVector3TypeConverter">
            <summary>
            TypeConverter to allow conversion of a string value to <see cref="T:SharpDX.Vector3"/>. Used to allow succinct Markup syntax e.g. 
            
            &lt;SciChart3DSurface WorldDimensions="10, 20, 30"/&gt;
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Common.DataBinding.StringToVector3TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Common.DataBinding.StringToVector3TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the string {0} into a DoubleRange. Please use the format '1.234,5.678'</exception>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10CompatibilityHelper">
            <summary>
            A helper class which can be used to detect if the Direct3D10 enhancements to SciChart can run on the current hardware &amp; operating system
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10CompatibilityHelper.IsSupportedOperatingSystem">
            <summary>
            Supported operating systems include Windows Vista, Windows 7, Windows 8, 8.1 and up. Windows XP, 2000, 2003 are not supported. 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10CompatibilityHelper.HasDirectX10RuntimeInstalled">
            <summary>
            Determines if the DirectX10 Runtime Libraries can be found in the C:\Windows\System32 and C:\Windows\SysWow64 folders. If the libraries are not present, we recommend 
            installing the DirectX End User Runtime (June 2010) from https://www.microsoft.com/en-gb/download/details.aspx?id=8109. 
            This installs platform specific libraries (x86, x64) and SciChart dynamically chooses the correct DirectX version at runtime
            </summary>        
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10CompatibilityHelper.HasDirectX10CapableGpu">
            <summary>
            Determines if the current GPU supports DirectX10 or later
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10CompatibilityHelper.SupportsDirectX10">
            <summary>
            Determines if the current hardware &amp; software configuration fully supports DirectX10 or later
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.DirectXHelper">
            <summary>
            A helper class to enable the Direct3D10RenderSurface 
            
            Usage:
            &gt;SciChartSurface DirectXHelper.TryApplyDirectXRenderer="True"/&lt;
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D">
            <summary>
            Defines the interface to a 3D RenderContext
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.BeginScene">
            <summary>
            BeginScene, must be called at the start of every frame
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.EndScene">
            <summary>
            EndScene, called at the end of every frame
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.DrawText(Abt.Controls.SciChart3D.Context.D3D10.IFont3D,System.String,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Color4)">
            <summary>
             drawing text usin the font, and position and roation around main axis
            </summary>
            <param name="font"></param>
            <param name="text"></param>
            <param name="location"></param>
            <param name="rotation"></param>
            <param name="color"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.DrawLine(Abt.Controls.SciChart.Rendering.Common.IPen2D,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Draws a line in 3D World coordinates between the Start and End vector, with the specified Pen
            </summary>
            <param name="pen">The pen (Color, stroke, antialias) to use for the line drawing</param>
            <param name="start">The start vector in World coordinates</param>
            <param name="end">The end vector in World coordinates</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.RenderColorTriangles(System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.UInt32})">
            <summary>
            Render a series of triangles that enclose points by heights sent, and filled with the colors sent 
            </summary>
            <param name="points"></param> base 2 points fron eight heights will be extended
            <param name="heights"></param> height used to extente length perpendicular on the point, creating quads ( 2 trangles for each 2 points )
            <param name="colors"></param> color used to fill the quads
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D.RenderGammaSeriesFilledTriangles(System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.UInt32})">
            <summary>
            Render gamma series, with pre calculated point on the other side of the gamma curve
            </summary>
            <param name="points"></param>
            <param name="gammaPoints"></param>
            <param name="colors"></param>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.RemoteDesktopDetectedEventArgs">
            <summary>
            Defines the event args for the RdpDetectionTimer.RemoteDesktopChanged event
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer">
            <summary>
            Provides a timer that can be used to detect if Remote Desktop sessions started or ended on the current PC. Ensure RdpDetectionTimer instances are disposed to unsubscribe to events. 
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer.RemoteDesktopChanged">
            <summary>
            Occurs when detection of RemoteDesktopSession changed. Check the IsRemoteDesktopDetected property 
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.RdpDetectionTimer.IsRemoteDesktop">
            <summary>
            Determines if the code is being run under Remote Desktop
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10RenderContextBuffer.End">
            <summary>
            renders primitives from list,
            clears primitives list,
            disposes buffer writer stream,
            flushes D3D device
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode">
            <summary>
            An abstract base class for Nodes in the Scene. Each node may contain 0..N children, may have an optional parent, and has an OnDraw method to draw the node plus children
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Scene.IMotherSceneNode">
            <summary>
            An abstract base class for Nodes in the Scene which contain children. 
            Each node may contain 0..N children, may have an optional parent, and has an OnDraw method to draw the node plus children
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode">
            <summary>
            Defines the interface for Nodes in the Scene. Each may have an optional parent, and has an OnDraw method to draw the node
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode.OnDraw(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Draws the current node, using the provided <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D"/> and <see cref="T:Abt.Controls.SciChart3D.Rendering.ICamera"/>
            </summary>
            <remarks>The base implementation of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> draws the children. It is recommended to call base.OnDraw to enable child drawing</remarks>
            <param name="renderContext">The RenderContext to draw with</param>
            <param name="camera">The current camera</param>
            <returns>A <see cref="T:Abt.Controls.SciChart.Services.RendererErrorCode"/> if there is any error. <see cref="F:Abt.Controls.SciChart.Services.RendererErrorCodes.Success"/> is returned in normal operation</returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode.ParentNode">
            <summary>
            Gets the parent node in the Scene. May be null
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.IMotherSceneNode.Find``1">
            <summary>
            Finds the First or Default node of type <typeparamref name="TNode"/> in the <see cref="P:Abt.Controls.SciChart3D.Engine2D.Scene.IMotherSceneNode.ChildNodes"/> collection
            </summary>
            <typeparam name="TNode">The type of node to find</typeparam>
            <returns>The node, if found, else Null</returns>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Scene.IMotherSceneNode.ChildNodes">
            <summary>
            Gets the collection of Child Nodes. This collection is never null. Changing it (adding, removing, clearing) will cause the scene to be invalidated
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.#ctor(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> class.
            </summary>
            <param name="children">The optional child nodes.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.OnDraw(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Draws the current node, using the provided <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D"/> and <see cref="T:Abt.Controls.SciChart3D.Rendering.ICamera"/>
            </summary>
            <param name="renderContext">The RenderContext to draw with</param>
            <param name="camera">The current camera</param>
            <remarks>
            The base implementation of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> draws the children. It is recommended to call base.OnDraw to enable child drawing
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.Find``1">
            <summary>
            Finds the First or Default node of type <typeparamref name="TNode" /> in the ChildNodes collection
            </summary>
            <typeparam name="TNode">The type of node to find</typeparam>
            <returns>
            The node, if found, else Null
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.ChildNodesOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the ChildNodes Collection of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode"/> instances changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.ParentNode">
            <summary>
            Gets the parent node. May be null
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode.ChildNodes">
            <summary>
            Gets the collection of Child Nodes. This collection is never null. Changing it (adding, removing, clearing) will cause the scene to be invalidated
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.TypedCollectionNode`1.AttachChild(`0)">
            <summary>
            Attaches an item to the Scene Graph 
            </summary>
            <param name="item">The Renderable Series to attach</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.TypedCollectionNode`1.DetachChild(`0)">
            <summary>
            Detaches an item from the Scene Graph 
            </summary>
            <param name="rSeries">The Renderable Series to attach</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.TypedCollectionNode`1.ChildNodesOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the ChildNodes Collection of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.ISceneNode"/> instances changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.IRootNode.PrepareScene(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Prepares the scene and performs one-time validations before Draw 
            </summary>
            <returns>A <see cref="T:Abt.Controls.SciChart.Services.RendererErrorCode"/> if there is any error. <see cref="F:Abt.Controls.SciChart.Services.RendererErrorCodes.Success"/> is returned in normal operation</returns>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Scene.RootNode">
            <summary>
            The root node in the SceneGraph. Requires an <see cref="T:Abt.Controls.SciChart.Visuals.IInvalidatableElement"/> parent to tell to redraw when a property in the scene changes and the scene needs redrawing
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.RootNode.#ctor(Abt.Controls.SciChart.Visuals.IInvalidatableElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.RootNode"/> class.
            </summary>
            <param name="invalidatableRoot">The invalidatable root.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Scene.RootNode.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Model.DataSeries.GridData`1">
            <summary>
            A Data Structure which stores a 2D uniform array of <typeparam name="T">T</typeparam> elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Model.DataSeries.GridData`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.GridData`1"/> class.
            </summary>
            <param name="xSize">Size of the x.</param>
            <param name="zSize">Size of the z.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Model.DataSeries.GridDataSeries2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.GridDataSeries2D"/> class.
            </summary>
            <param name="xSize">Size of the x.</param>
            <param name="zSize">Size of the z.</param>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D">
            <summary>
            Allows a collection of modifiers to be set on the <see cref="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.ChartModifier"/> property. Child modifiers are stored in the
            <see cref="P:Abt.Controls.SciChart.ChartModifiers.ModifierGroup.ChildModifiers"/> collection, which is backed by a DependencyProperty so may be bound to in Xaml.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase">
            <summary>
            Defines the base class to a Chart Modifier, which can be used to extend the interactivity or rendering of the <see cref="!:ISciChartSurface3D"/>
            </summary>
            <seealso cref="T:Abt.Controls.SciChart.ChartModifiers.ModifierGroup"/>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Modifiers.IChartModifier3D">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase"/>, which can be used to extend the interactivity or rendering of the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Modifiers.IChartModifier3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.IsEnabledProperty">
            <summary>
            Defines the IsEnabled Attached Property
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.CanReceiveMouseEvents">
            <summary>
            Returns a value indicating whether mouse events should be propagated to the mouse target.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Abt.Controls.SciChart.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.IsPointWithinBounds(System.Windows.Point,Abt.Controls.SciChart.Visuals.IHitTestable)">
            <summary>
            Gets whether the mouse point is within the bounds of the hit-testable element. Assumes the mouse-point has not been translated yet (performs translation)
            </summary>
            <param name="mousePoint"></param>
            <param name="hitTestable"></param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifiers.ChartModifierBase"/> instance
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.ChildModifiersProperty">
            <summary>
            Defines the ChildModifiers DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.#ctor(Abt.Controls.SciChart3D.Modifiers.IChartModifier3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <param name="childModifiers">The child modifier collection.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:Abt.Controls.SciChart.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierDoubleClick(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierMouseDown(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierMouseMove(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierMouseUp(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierMouseWheel(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnMasterMouseLeave(Abt.Controls.SciChart.ChartModifiers.ModifierMouseArgs)">
            <summary>
            Called when the mouse leaves the Master of current <see cref="P:Abt.Controls.SciChart.ChartModifiers.ChartModifierBase.MouseEventGroup"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierTouchDown(Abt.Controls.SciChart.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierTouchMove(Abt.Controls.SciChart.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnModifierTouchUp(Abt.Controls.SciChart.ChartModifiers.ModifierTouchManipulationArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.HasModifier(System.Type)">
            <summary>
            Determines whether the current <see cref="T:Abt.Controls.SciChart.ChartModifiers.ModifierGroup"/> has a child modifier of the desired type
            </summary>
            <param name="desiredType">The type of child modifier to search for</param>
            <returns><c>true</c> if the current <see cref="T:Abt.Controls.SciChart.ChartModifiers.ModifierGroup"/> has a chlid modifier by this type; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:Abt.Controls.SciChart.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.ChildModifiers">
            <summary>
            Gets or sets a collection of child modifiers in this group
            </summary>
            <value>The child modifiers.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.Item(System.String)">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ChartModifiers.IChartModifier"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Abt.Controls.SciChart.ChartModifiers.IChartModifier"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Modifiers.ModifierGroup3D.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ChartModifiers.IChartModifier"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Abt.Controls.SciChart.ChartModifiers.IChartModifier"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.AltCamera.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.AltCamera.ResumeUpdates(Abt.Controls.SciChart.Visuals.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.AltCamera.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Rendering.AltCamera.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.Camera.#ctor">
            <summary>
            Constructor, initialize a default camera
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.Camera.Init(SharpDX.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Initalize the camera using its location and orientation angles
            </summary>
            <param name="vLoc"></param>
            <param name="fYaw"></param>
            <param name="fPitch"></param>
            <param name="fRoll"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.Camera.Update(System.Int32,System.Int32)">
            <summary>
            Perform per frame update for the camera
            </summary>
            <param name="width">The backbuffer width.</param>
            <param name="height">The backbuffer height.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Common.Disposer.RemoveAndDispose``1(``0)">
            <summary>
            Dispose an object instance and set the reference to null
            </summary>
            <typeparam name="T">The type of object to dispose</typeparam>
            <param name="resource">A reference to the instance for disposal</param>
            <remarks>This method hides any thrown exceptions that might occur during disposal of the object (by design)</remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.AddSeries(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D})">
            <summary>
            Adds the collection of <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instances to the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.ContainsSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/> contains the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance</param>
            <returns><c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.AddSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance to the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.RemoveSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> from the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.GetRenderContext">
            <summary>
            Creates an <see cref="T:Abt.Controls.SciChart.Rendering.Common.IRenderContext2D"/> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D.ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/> instance
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D">
            <summary>
            Provides an abstract base class for 3D Axis in the SciChart3D Project
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorDeltaProperty">
            <summary>Defines the MajorDelta DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorDeltaProperty">
            <summary>Defines the MinorDelta DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorsPerMajorProperty">
            <summary>Defines the MinorDelta DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.GrowByProperty">
            <summary>Defines the GrowBy DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.VisibleRangeProperty">
            <summary>Defines the VisibleRange DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AnimatedVisibleRangeProperty">
            <summary>Defines the Animated VisibleRange DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.VisibleRangePointProperty">
            <summary>Defines the VisibleRangePoint DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MaxAutoTicksProperty">
            <summary>Defines the MaxAutoTicks DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AutoTicksProperty">
            <summary>Defines the AutoTicks DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TextFormattingProperty">
            <summary>Defines the TextFormatting DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AxisTitleProperty">
            <summary>Defines the AxisTitle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TitleStyleProperty">
            <summary>Defines the TitleStyle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorTickLineStyleProperty">
            <summary>Defines the MajorTickLineStyle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorTickLineStyleProperty">
            <summary>Defines the MinorTickLineStyle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorTicksProperty">
            <summary>Defines the DrawMajorTicks DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMinorTicksProperty">
            <summary>Defines the DrawMinorTicks DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawLabelsProperty">
            <summary>Defines the DrawLabels DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorGridLineStyleProperty">
            <summary>Defines the MajorGridLineStyle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorGridLineStyleProperty">
            <summary>Defines the MinorGridLineStyle DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorGridLinesProperty">
            <summary>Defines the DrawMajorGridLines DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMinorGridLinesProperty">
            <summary>Defines the DrawMinorGridLines DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorBandsProperty">
            <summary>Defines the DrawMajorBands DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AxisBandsFillProperty">
            <summary>Defines the AxisBandsFill DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TickLabelStyleProperty">
            <summary>Defines the AutoTicks DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.InvalidateParent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides a DependencyProperty callback which invalidates the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.OnDraw(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Draws the current node, using the provided <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D"/> and <see cref="T:Abt.Controls.SciChart3D.Rendering.ICamera"/>
            </summary>
            <param name="renderContext">The RenderContext to draw with</param>
            <param name="camera">The current camera</param>
            <remarks>
            The base implementation of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> draws the children. It is recommended to call base.OnDraw to enable child drawing
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorDelta">
            <summary>
            Gets or sets the Major Delta
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorDelta">
            <summary>
            Gets or sets the Minor Delta
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorsPerMajor">
            <summary>
            Gets or sets the number of Minor Delta ticks per Major Tick
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.GrowBy">
            <summary>
            Gets or sets the GrowBy Factor. e.g. GrowBy(0.1, 0.2) will increase the axis extents by 10% (min) and 20% (max) outside of the data range
            </summary>
            <value>The grow by factor as a DoubleRange.</value>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.VisibleRange">
            <summary>
            Gets or sets the VisibleRange of the Axis.
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AnimatedVisibleRange">
            <summary>
            Gets or sets the animated VisibleRange of the Axis. 
            When this property is set, the axis animates the VisibleRange to the new value over a duration of 500ms
            </summary>
            <value>The visible range.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MaxAutoTicks">
            <summary>
            Gets or sets the max ticks.
            </summary>
            <value>The max ticks.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AutoTicks">
            <summary>
            Gets or sets value, that indicates whether calculate ticks automatically. Default is True.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TextFormatting">
            <summary>
            Gets or sets the Text Formatting String for Tick Labels on this axis
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AxisTitle">
            <summary>
            Gets or sets the Axis Title
            </summary>
            <value>The axis title.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TitleStyle">
            <summary>
            Gets or sets the Style of the Axis Title
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorTickLineStyle">
            <summary>
            Gets or sets the Major Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The major tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorTickLineStyle">
            <summary>
            Gets or sets the Minor Tick Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major ticks on this axis
            </summary>
            <value>The minor tick line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorTicks">
            <summary>
            If True, draws Major Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMinorTicks">
            <summary>
            If True, draws Minor Tick Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawLabels">
            <summary>
            If True, draw labels for each major tick on the Axis, else skips this step
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MajorGridLineStyle">
            <summary>
            Gets or sets the Major Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all major gridlines drawn by this axis
            </summary>
            <value>The major grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.MinorGridLineStyle">
            <summary>
            Gets or sets the Minor Grid Line Style (TargetType <see cref="T:System.Windows.Shapes.Line"/>), applied to all minor gridlines drawn by this axis
            </summary>
            <value>The minor grid line style.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorGridLines">
            <summary>
            If True, draws Major Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMinorGridLines">
            <summary>
            If True, draws Minor Grid Lines, else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorBands">
            <summary>
            If True, draws Major Axis Bands (a filled area between major gridlines), else skips this step
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.AxisBandsFill">
            <summary>
            Gets or sets the Fill of the Axis Bands. Also see <see cref="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.DrawMajorBands"/> to enable this behaviour
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.TickLabelStyle">
            <summary>
            Gets or sets a style for the labels on this Axis.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D.ParentNode">
            <summary>
            Gets the parent node in the Scene. May be null
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.NumericAxis3D.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.Axis.NumericAxis3D.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this SciChartSurface draws.        
            </summary>
            <remarks>A <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> is bound to an <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/> derived type.
            If a RenderableSeries.IsEnabled=false, then this series is skipped when evaluating the series to draw</remarks>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.ZAxis">
            <summary>
            Gets or sets the ZAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.YAxis">
            <summary>
            Gets or sets the YAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.XAxis">
            <summary>
            Gets or sets the XAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.ChartModifier">
            <summary>
            Gets or sets the ChartModifier on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface.Camera">
            <summary>
            Gets or sets the Camera on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D">
            <summary>
            Defines the Base class for all BaseRenderableSeries3D within SciChart3D. 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/> data-source, 
            and provides configuration properties to draw a series or surface type onto a specific <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>.
            A given <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/> may have 0..N <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/>, each of which may map to, or share a <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/>
            </remarks>
            <seealso cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D">
            <summary>
            Defines the interface to a <see cref="T:Abt.Controls.SciChart.Visuals.RenderableSeries.BaseRenderableSeries"/>, which is visual element of the RenderSeries - DataSeries pair in the <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <seealso cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            <seealso cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            <seealso cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D.DataSeries">
            <summary>
            Gets or sets the <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/> that acts as a datasource for this <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/>
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.DataSeriesProperty">
            <summary>Defines the DataSeries DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.IsSelectedProperty">
            <summary>Defines the IsSelected DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.OnInvalidateParentSurface(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When called, invalidates the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/>
            </summary>
            <param name="d">The DependencyObject that raised the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.OnInvalidateParentSurface">
            <summary>
            Causes the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/> to invalidate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.GetParentSurface">
            <summary>
            Gets the parent <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/> for this <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.OnDraw(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Draws the current node, using the provided <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D"/> and <see cref="T:Abt.Controls.SciChart3D.Rendering.ICamera"/>
            </summary>
            <param name="renderContext">The RenderContext to draw with</param>
            <param name="camera">The current camera</param>
            <remarks>
            The base implementation of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> draws the children. It is recommended to call base.OnDraw to enable child drawing
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.Services">
            <summary>
            Gets the <see cref="T:Abt.Controls.SciChart.ServiceContainer"/> which provides access to services throughout SciChart. ServiceContainers are created one per 
            <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/> instance, and shared between peripheral components such as <see cref="T:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D"/>, <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/>, <see cref="T:Abt.Controls.SciChart3D.Modifiers.IChartModifier3D"/> instances.
            For a full list of available services, see the remarks on <see cref="T:Abt.Controls.SciChart.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.IsSelected">
            <summary>
            Gets or sets the IsSelectedProperty.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D.ParentNode">
            <summary>
            Gets the parent node in the Scene. May be null
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorMapGridPalette">
            <summary>
            Defines a ColorMap Palette, which generates a 2D array of color values based on a LinearGradientBrush HeightMap and MinMax values
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D">
            <summary>
            Defines the interface to a Grid Palette, a uniform grid palette
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D.PaletteUpdated">
            <summary>
            Occurs when a property in the Palette has updated, and the parent series must redraw
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D.InterpolationMode">
            <summary>
            Defines the interpolation mode for the palette colors
            <list type="disc">
            <item>Smooth: interpolates colors smoothly between cells</item>
            <item>Hard: interpolates colors smoothly between cells</item>
            </list>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D.Item(System.Int32,System.Int32)">
            <summary>
            Gets the Color at this i, j index
            </summary>
            <param name="i">The i index (corresponds to Z-Axis)</param>
            <param name="j">The j index (corresopnds to X-Axis)</param>
            <returns>The Color at this cell</returns>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPaletteBase.InterpolationModeProperty">
            <summary>Defines the InterpolationMode DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPaletteBase.OnPaletteUpdated">
            <summary>
            Raises the PaletteUpdated event
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPaletteBase.PaletteUpdated">
            <summary>
            Occurs when a property in the Palette has updated, and the parent series must redraw
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPaletteBase.InterpolationMode">
            <summary>
            Defines the interpolation mode for the palette colors
            <list type="disc"><item>Smooth: interpolates colors smoothly between cells</item><item>Hard: interpolates colors smoothly between cells</item></list>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPaletteBase.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.UInt32"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.UInt32"/>.
            </value>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns></returns>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorMapGridPalette.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.UInt32"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.UInt32"/>.
            </value>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil">
            <summary>
            ColorUtil converts to and from <see cref="T:System.Windows.Media.Color"/> structs and <see cref="T:System.UInt32"/> for use in the 3D renderer
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil.ToUInt(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> struct to <see cref="T:System.UInt32"/>
            </summary>
            <param name="color">The color.</param>
            <returns>The UInt32 equivalent</returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil.FromUInt(System.UInt32)">
            <summary>
            Converts a <see cref="T:System.UInt32"/> to <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="color">The color as UInt32.</param>
            <returns>The Color equivalent</returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:System.UInt32"/> Color from R G B values
            </summary>
            <param name="red">The red value (0-255).</param>
            <param name="green">The green value (0-255).</param>
            <param name="blue">The blue value (0-255).</param>
            <returns>
            The UInt32 equivalent
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:System.UInt32"/> Color from A R G B values
            </summary>
            <param name="alpha">The alpha value (0-255).</param>
            <param name="red">The red value (0-255).</param>
            <param name="green">The green value (0-255).</param>
            <param name="blue">The blue value (0-255).</param>
            <returns>
            The UInt32 equivalent
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.ColorUtil.Lerp(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Linearly interpolates between two colors based on the ratio passed in. E.g. Ratio = 0.0f returns From color, ratio = 1.0f returns To Color. Ratio = 0.5f returns a mix of the two
            </summary>
            <param name="from">The From color</param>
            <param name="to">The Two color</param>
            <param name="ratio">The ratio of the two colors to mix</param>
            <returns>A new color formed by (ratio * from) + ((1.0-ratio) * to)</returns>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPalette">
            <summary>
            Defines a Grid Palette, which accepts a 2D array of color values and provides exact colors per cell
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPalette.Clear(System.Int32,System.Int32)">
            <summary>
            Clears the Palette with the specified X-Z size
            </summary>
            <param name="zSize">Size in the z direction.</param>
            <param name="xSize">Size in the x direction.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPalette.PushRow(System.UInt32[])">
            <summary>
            Pushes a row at Z=0 and scrolls the remaining rows one place towards higher-Z
            </summary>
            <param name="row"></param>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.GridPalette.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.UInt32"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.UInt32"/>.
            </value>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SolidColorGridPalette">
            <summary>
            Defines a SolidColor Palette for Uniform grids
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SolidColorGridPalette.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SolidColorGridPalette"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SolidColorGridPalette.Color">
            <summary>
            Gets or sets the solid color
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SolidColorGridPalette.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.UInt32"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.UInt32"/>.
            </value>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns></returns>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.AntiAliasingProperty">
            <summary>Defines the AntiAliasing DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.SeriesColorProperty">
            <summary>Defines the SeriesColor DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.StrokeThicknessProperty">
            <summary>Defines the StrokeThickness DependencyProperty</summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.AntiAliasing">
            <summary>
            Gets or sets whether this series uses AntiAliasing when drawn
            </summary>
            <value><c>true</c> if anti aliasing is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.SeriesColor">
            <summary>
            Gets or sets the SeriesColor.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.RenderableSeries.StrokedRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the line. 
            </summary>
            <remarks>
            Note that increasing stroke thickness from 1 will have a detrimental effect on performance
            </remarks>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawMeshAsProperty">
            <summary>
            Defines the DrawMeshAs DependencyProperty
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D.PaletteProperty">
            <summary>
            Defines the Grid Palette
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawSkirtProperty">
            <summary>
            Defines the Draw Skirt DependencyProperty
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3D.OnDraw(Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D,Abt.Controls.SciChart3D.Rendering.ICamera)">
            <summary>
            Draws the current node, using the provided <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.IRenderContext3D"/> and <see cref="T:Abt.Controls.SciChart3D.Rendering.ICamera"/>
            </summary>
            <param name="renderContext">The RenderContext to draw with</param>
            <param name="camera">The current camera</param>
            <remarks>
            The base implementation of <see cref="T:Abt.Controls.SciChart3D.Engine2D.Scene.SceneNode"/> draws the children. It is recommended to call base.OnDraw to enable child drawing
            </remarks>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface">
            <summary>
            Provides a high performance 3D chart surface with a single <see cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/> viewport 
            for rendering multiple <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/>, X, Y and Z <see cref="T:Abt.Controls.SciChart3D.Visuals.Axis.IAxis3D"/> instances, 
            with <see cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/> bindings, mulitple <see cref="T:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase"/> derived behaviour modifiers 
            </summary>
            <seealso cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.BaseRenderableSeries3D"/>
            <seealso cref="T:Abt.Controls.SciChart3D.Model.DataSeries.IDataSeries3D"/>
            <seealso cref="T:Abt.Controls.SciChart3D.Modifiers.ChartModifier3DBase"/>
            <seealso cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Abt.Controls.SciChart3D.Visuals.Axis.AxisBase3D"/>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.CameraProperty">
            <summary>Defines the Camera DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.ChartModifierProperty">
            <summary>Defines the ChartModifier DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.RenderableSeriesProperty">
            <summary>Defines the RenderableSeries DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.XAxisProperty">
            <summary>Defines the XAxis DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.YAxisProperty">
            <summary>Defines the YAxis DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.ZAxisProperty">
            <summary>Defines the ZAxis DependencyProperty</summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.WorldDimensionsProperty">
            <summary>Defines the WorldDimensions DependencyProperty</summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.#cctor">
            <summary>
            Initializes the <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.OnRenderSurfaceDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called with the <see cref="F:Abt.Controls.SciChart.Visuals.SciChartSurfaceBase.RenderSurfaceProperty"/> changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.RegisterServices(Abt.Controls.SciChart.IServiceContainer)">
            <summary>
            Called in the constructor of <see cref="T:Abt.Controls.SciChart.Visuals.SciChartSurfaceBase"/>, gives derived classes the opportunity to register services per <see cref="T:Abt.Controls.SciChart.Visuals.SciChartSurfaceBase"/> instance
            </summary>
            <param name="serviceContainer">The service container instance.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.OnSciChartSurfaceLoaded">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.Visuals.SciChartSurfaceBase"/> is loaded. Perform initialization operations here.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.OnSciChartSurfaceUnloaded">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.Visuals.SciChartSurfaceBase"/> is Unloaded and removed from the visual tree. Perform cleanup operations here
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.Camera">
            <summary>
            Gets or sets the Camera on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.ChartModifier">
            <summary>
            Gets or sets the ChartModifier on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.RenderableSeries">
            <summary>
            Gets the collection of <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> that this SciChart3DSurface draws.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.XAxis">
            <summary>
            Gets or sets the XAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.YAxis">
            <summary>
            Gets or sets the YAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.ZAxis">
            <summary>
            Gets or sets the ZAxis on the <see cref="T:Abt.Controls.SciChart3D.Visuals.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Visuals.SciChart3DSurface.WorldDimensions">
            <summary>
            Gets or sets the World Dimensions as a <see cref="T:SharpDX.Vector3"/>. 
            </summary>
            <remarks>
            The default is Z,Y,Z = 100,100,100.
            The extents of the X,Y,Z world ranges from -DimX/2 to +DimX/2, -DimY/2 to +DimY/2, -DimZ/2 to +DimZ/2
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Visuals.TemplatableControl.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T"/>, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.#ctor(System.Windows.Controls.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.FillSource">
            <summary>
            Should be called to fill the WPF Image from the Direct3D Render Target at the end of drawing
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.FillSourceRDP">
            <summary>
            Should be called to fill the WPF Image from the Direct3D Render Target at the end of drawing
            </summary>
            <remarks>
            Alternative method for filling a WriteableBitmap with directx content, avoiding D3DImage (does not work over RDP due to bug in .NET4.0 implementation of D3DImage)
            </remarks>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.StartD3DIfNotStarted(System.Int32,System.Int32,System.EventHandler{Abt.Controls.SciChart3D.Context.D3D10.DXErrorEventArgs},System.EventHandler{Abt.Controls.SciChart3D.Context.D3D10.DXErrorEventArgs})">
            <summary>
            Starts DirectX with the specified width and height of the target
            </summary>        
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.AliasDx10Texture">
            <summary>
            Alias the DX10 texture as a DX9 texture.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.OnIsFrontBufferAvailableChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
             this fires when the screen saver kicks in, the machine goes into sleep or hibernate
             and any other catastrophic losses of the d3d device from WPF's point of view
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.TargetWidth">
            <summary>
            The width of the Render Target in pixels
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Image.TargetHeight">
            <summary>
            The height of the Render Target in pixels
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.DxRenderContext.DrawLine(Abt.Controls.SciChart.Rendering.Common.IPen2D,SharpDX.Vector3,SharpDX.Vector3)">
            new 3d methods
            
            
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Renderer.CreateDx9Device">
            <summary>
            Create a Direct3D9 device to use for creating the D3D9Image texture.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Renderer.SetMatrixMode(Abt.Controls.SciChart3D.Context.D3D10.eMatrixMode)">
            <summary>
             Sets the matrix mode used
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10Renderer.GetMatrixMode">
            <summary>
             Gets the mtrix used used
            </summary>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface">
            <summary>
            Provides a <see cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/> implementation that uses a DirectX 10 High Quality and High Speed rasterizer, capable of rendering with sub-pixel accuracy. 
            This requires DirectX10 hardware or later to run. Newer GPUs will have superior performance. If performance issues occur, please use the <see cref="T:Abt.Controls.SciChart.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
            </summary>
            <seealso cref="T:Abt.Controls.SciChart.Rendering.HighSpeedRasterizer.HighSpeedRenderSurface"/>
            <seealso cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/>
            <seealso cref="T:Abt.Controls.SciChart.Rendering.Common.IRenderContext2D"/>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface"/> class.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.Abt#Controls#SciChart3D#Rendering#IRenderSurface3D#GetRenderContext">
            <summary>
            Creates an <see cref="T:Abt.Controls.SciChart.Rendering.Common.IRenderContext2D"/> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.RecreateSurface">
            <summary>
            this is called when window is created or resized
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.AssertSupportsDirectX">
            <summary>
            Asserts the current hardware/software configuration supports DirectX. 
            
            Will throw a PlatformNotSupportedException if InitializationFailed is not handled, otherwise, raises the InitializationFailed event 
            </summary>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.OnRenderSurfaceBaseLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/> is loaded into the visual tree
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.DisposeUnmanagedResources">
            <summary>
            Derived classes may override this method to be notified when to dispose of unmanaged resources. Called when the
            <see cref="T:Abt.Controls.SciChart.Rendering.Common.RenderSurfaceBase"/> is disposed
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.AddSeries(System.Collections.Generic.IEnumerable{Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D})">
            <summary>
            Adds the collection of <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instances to the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.AddSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Adds the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance to the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.ContainsSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Returns True if the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/> contains the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> instance</param>
            <returns>
              <c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.RemoveSeries(Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Removes the <see cref="T:Abt.Controls.SciChart3D.Visuals.RenderableSeries.IRenderableSeries3D"/> from the <see cref="T:Abt.Controls.SciChart3D.Rendering.IRenderSurface3D"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="E:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.InitializationFailed">
            <summary>
            This event handler will fire if the directx intialization fails
            </summary>
        </member>
        <member name="E:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.RenderingFailed">
            <summary>
            Event handler to be used when rendering fails..
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.SupportsDirectX10">
            <summary>
            Gets a value indicating whether your current hardware supports DirectX10. THIS CALL IS DEFERRED TO Direct3D10CompatibilityHelper.SupportsDirectX10. Please check the property values and Intellisense documentation for Direct3D10CompatibilityHelper to see the reason why this failed
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Context.D3D10.Direct3D10RenderSurface.Abt#Controls#SciChart3D#Rendering#IRenderSurface3D#ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:Abt.Controls.SciChart.Rendering.Common.IRenderSurface2D"/> instance
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10LinesRenderBuffer">
            <summary>
            a buffer that only drawns line primitives, line vertcies are simple x-y  vertices
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10LinesRenderBuffer.MinDistanceSquaredForCulling">
            <summary>
            The minimum distance squared between two Vector2 to qualify it for drawing
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer">
            <summary>
            a buffer that only drawns line primitives, line vertcies are simple x-y  vertices
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawGradientCellsGrid(System.Single[][],Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a grid of values, with solid colors for each cell in the grid, no color smotthing will happen
            
            </summary>
            <param name="values"> height values for each point in the grid </param>
            <param name="colors"> color to use in each cell encoded and ARGB uint, colors on edges are ignored because each cell will use one solif color</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawSolidCellsGrid(System.Single[][],Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a grid of values, with solid colors for each cell in the grid, no color smotthing will happen
            
            </summary>
            <param name="values"> height values for each point in the grid </param>
            <param name="colors"> color to use in each cell encoded and ARGB uint, colors on edges are ignored because each cell will use one solif color</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawSolidColorCellsGrid(System.Single[][],System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a grid of values, with solid colors for each cell in the grid, no color smoothing will happen
            
            </summary>
            <param name="values"> height values for each point in the grid </param>
            <param name="colors"> color to use in each cell encoded and ARGB uint, colors on edges are ignored because each cell will use one solif color</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawWireframeCellsGrid(System.Single[][],Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            
            </summary>
            <param name="values"> height values for each point in the grid </param>
            <param name="colors"> color to use in each cell encoded and ARGB uint, colors on edges are ignored because each cell will use one solif color</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawCellsGrid(System.Single[][],Abt.Controls.SciChart3D.Visuals.RenderableSeries.IGridPalette3D,System.Int32,System.Int32,Abt.Controls.SciChart3D.Engine2D.Drawables.RenderingTechniqueIndex3D,System.Boolean,SharpDX.Vector4,SharpDX.Vector4)">
            <summary>
            Draw a grid of values, with solid colors for each cell in the grid, no color smotthing will happen
            
            </summary>
            <param name="values"> height values for each point in the grid </param>
            <param name="colors"> color to use in each cell encoded and ARGB uint, colors on edges are ignored because each cell will use one solif color</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10MeshRenderBuffer.DrawVertices(SharpDX.Vector3[],System.UInt32)">
            <summary>
            Test function to test rendering of individual vertices, probabaly wont be needed in any actual scenario
            </summary>
            <param name="verts"></param>
            <param name="color"></param>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Context.D3D10.RenderBuffers.Direct3D10PixelsRenderBuffer.GetVertexByteSize">
            <summary>
             2 floats, one integer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Data.DrawingConstantsForShaders">
            <summary>
            is used to send data to graphics card into constant buffer
            !!!!!!!!size has to be multiple of 16 bit
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Data.DrawingConstantsForShaders3D">
            <summary>
            is used to send data to graphics card into constant buffer
            !!!!!!!!size has to be multiple of 16 bit
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Drawables.NonValidReturnException">
            <summary>
            Summary description for NoValidReturnException.
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Drawables.RenderingTechniqueIndex2D">
            <summary>
            enumerates rendering techniques in Shaders2.fx file
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo">
            <summary>
            contains information for rendering a single primitive - line, polyline, rectangle, list of sprites
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo.StartVertex">
            <summary>
            points to common shared dynamic buffer
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo.VertexCount">
            <summary>
            count of vertices in shared buffer used by this primitive
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo.DrawingConstantsForShaders">
            <summary>
            contains variables which are sent to shader like color, line thickness, screen size
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo.ShaderResourceView">
            <summary>
            texture resource
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo.Pen">
            pen used in primitive 
            
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Drawables.RenderingTechniqueIndex3D">
            <summary>
            enumerates rendering techniques in Shaders2.fx file
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo3D">
            <summary>
            contains information for rendering a single primitive - line, polyline, rectangle, list of sprites
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo3D.StartVertex">
            <summary>
            points to common shared dynamic buffer
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo3D.VertexCount">
            <summary>
            count of vertices in shared buffer used by this primitive
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo3D.DrawingConstantsForShaders">
            <summary>
            contains variables which are sent to shader like color, line thickness, screen size
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Engine2D.Drawables.PrimitiveInfo3D.ShaderResourceView">
            <summary>
            texture resource
            </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Engine2D.Effects.ShaderManager">
            <summary>
            compiles Direct3D shaders from FX files in assembly resources
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Abt.Controls.SciChart3D.Engine2D.Tess.Geom.EdgeEval(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)" -->
        <!-- Badly formed XML comment ignored for member "M:Abt.Controls.SciChart3D.Engine2D.Tess.Geom.EdgeSign(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)" -->
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Geom.EdgeIntersect(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            Given edges (o1,d1) and (o2,d2), compute their point of intersection.
            The computed point is guaranteed to lie in the intersection of the
            bounding rectangles defined by each edge.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.MakeEdge">
            <summary>
            Creates one edge, two vertices and a loop (face).
            The loop consists of the two new half-edges.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.Splice(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
             <summary>
             Splice is the basic operation for changing the
             mesh connectivity and topology. It changes the mesh so that
             eOrg->Onext = OLD( eDst->Onext )
             eDst->Onext = OLD( eOrg->Onext )
             where OLD(...) means the value before the meshSplice operation.
            
             This can have two effects on the vertex structure:
             - if eOrg->Org != eDst->Org, the two vertices are merged together
             - if eOrg->Org == eDst->Org, the origin is split into two vertices
             In both cases, eDst->Org is changed and eOrg->Org is untouched.
            
             Similarly (and independently) for the face structure,
             - if eOrg->Lface == eDst->Lface, one loop is split into two
             - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
             In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
            
             Some special cases:
             If eDst == eOrg, the operation has no effect.
             If eDst == eOrg->Lnext, the new face will have a single edge.
             If eDst == eOrg->Lprev, the old face will have a single edge.
             If eDst == eOrg->Onext, the new vertex will have a single edge.
             If eDst == eOrg->Oprev, the old vertex will have a single edge.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.Delete(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Removes the edge eDel. There are several cases:
            if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
            eDel->Lface is deleted. Otherwise, we are splitting one loop into two;
            the newly created loop will contain eDel->Dst. If the deletion of eDel
            would create isolated vertices, those are deleted as well.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.AddEdgeVertex(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Creates a new edge such that eNew == eOrg.Lnext and eNew.Dst is a newly created vertex.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.SplitEdge(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Splits eOrg into two edges eOrg and eNew such that eNew == eOrg.Lnext.
            The new vertex is eOrg.Dst == eNew.Org.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.Connect(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
             <summary>
             Creates a new edge from eOrg->Dst to eDst->Org, and returns the corresponding half-edge eNew.
             If eOrg->Lface == eDst->Lface, this splits one loop into two,
             and the newly created loop is eNew->Lface. Otherwise, two disjoint
             loops are merged into one, and the loop eDst->Lface is destroyed.
            
             If (eOrg == eDst), the new face will have only two edges.
             If (eOrg->Lnext == eDst), the old face is reduced to a single edge.
             If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Mesh.ZapFace(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face)">
            <summary>
            Destroys a face and removes it from the global face list. All edges of
            fZap will have a NULL pointer as their left face. Any edges which
            also have a NULL pointer as their right face are deleted entirely
            (along with any isolated vertices this produces).
            An entire mesh can be deleted by zapping its faces, one at a time,
            in any order. Zapped faces cannot be used in further mesh operations!
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.MakeEdge(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            MakeEdge creates a new pair of half-edges which form their own loop.
            No vertex or face structures are allocated, but these must be assigned
            before the current edge operation is completed.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Splice(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Splice( a, b ) is best described by the Guibas/Stolfi paper or the
            CS348a notes (see Mesh.cs). Basically it modifies the mesh so that
            a->Onext and b->Onext are exchanged. This can have various effects
            depending on whether a and b belong to different face or vertex rings.
            For more explanation see Mesh.Splice().
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.MakeVertex(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the
            origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives
            a place to insert the new vertex in the global vertex list. We insert
            the new vertex *before* vNext so that algorithms which walk the vertex
            list will not see the newly created vertices.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.MakeFace(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face)">
            <summary>
            MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left
            face of all edges in the face loop to which eOrig belongs. "fNext" gives
            a place to insert the new face in the global face list. We insert
            the new face *before* fNext so that algorithms which walk the face
            list will not see the newly created faces.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.KillEdge(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),
            and removes from the global edge list.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.KillVertex(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            KillVertex( vDel ) destroys a vertex and removes it from the global
            vertex list. It updates the vertex loop to point to a given new vertex.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.KillFace(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face)">
            <summary>
            KillFace( fDel ) destroys a face and removes it from the global face
            list. It updates the face loop to point to a given new face.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.EdgeLeq(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
             <summary>
             Both edges must be directed from right to left (this is the canonical
             direction for the upper edge of each region).
            
             The strategy is to evaluate a "t" value for each edge at the
             current sweep line position, given by tess->event. The calculations
             are designed to be very stable, but of course they are not perfect.
            
             Special case: if both edge destinations are at the sweep event,
             we sort the edges by slope (they would otherwise compare equally).
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.FixUpperEdge(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Replace an upper edge which needs fixing (see ConnectRightVertex).
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.AddRegionBelow(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Add a new active region to the sweep line, *somewhere* below "regAbove"
            (according to where the new edge belongs in the sweep-line dictionary).
            The upper edge of the new region will be "eNewUp".
            Winding number and "inside" flag are not updated.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.FinishRegion(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
            <summary>
            Delete a region from the sweep line. This happens when the upper
            and lower chains of a region meet (at a vertex on the sweep line).
            The "inside" flag is copied to the appropriate mesh face (we could
            not do this before -- since the structure of the mesh is always
            changing, this face may not have even existed until now).
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.FinishLeftRegions(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
            <summary>
            We are given a vertex with one or more left-going edges. All affected
            edges should be in the edge dictionary. Starting at regFirst->eUp,
            we walk down deleting all regions where both edges have the same
            origin vOrg. At the same time we copy the "inside" flag from the
            active region to the face, since at this point each face will belong
            to at most one region (this was not necessarily true until this point
            in the sweep). The walk stops at the region above regLast; if regLast
            is null we walk as far as possible. At the same time we relink the
            mesh if necessary, so that the ordering of edges around vOrg is the
            same as in the dictionary.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.AddRightEdges(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,System.Boolean)">
            <summary>
            Purpose: insert right-going edges into the edge dictionary, and update
            winding numbers and mesh connectivity appropriately. All right-going
            edges share a common origin vOrg. Edges are inserted CCW starting at
            eFirst; the last edge inserted is eLast.Oprev. If vOrg has any
            left-going edges already processed, then eTopLeft must be the edge
            such that an imaginary upward vertical segment from vOrg would be
            contained between eTopLeft.Oprev and eTopLeft; otherwise eTopLeft
            should be null.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.SpliceMergeVertices(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
            <summary>
            Two vertices with idential coordinates are combined into one.
            e1.Org is kept, while e2.Org is discarded.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.VertexWeights(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,System.Single@,System.Single@)">
            <summary>
            Find some weights which describe how the intersection vertex is
            a linear combination of "org" and "dest". Each of the two edges
            which generated "isect" is allocated 50% of the weight; each edge
            splits the weight between its org and dst according to the
            relative distance to "isect".
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.GetIntersectData(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            We've computed a new intersection point, now we need a "data" pointer
            from the user so that we can refer to this new vertex in the
            rendering callbacks.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.CheckForRightSplice(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edge of "regUp", to make sure that the
             eUp->Org is above eLo, or eLo->Org is below eUp (depending on which
             origin is leftmost).
            
             The main purpose is to splice right-going edges with the same
             dest vertex and nearly identical slopes (ie. we can't distinguish
             the slopes numerically). However the splicing can also help us
             to recover from numerical errors. For example, suppose at one
             point we checked eUp and eLo, and decided that eUp->Org is barely
             above eLo. Then later, we split eLo into two edges (eg. from
             a splice operation like this one). This can change the result of
             our test so that now eUp->Org is incident to eLo, or barely below it.
             We must correct this condition to maintain the dictionary invariants.
            
             One possibility is to check these edges for intersection again
             (ie. CheckForIntersect). This is what we do if possible. However
             CheckForIntersect requires that tess->event lies between eUp and eLo,
             so that it has something to fall back on when the intersection
             calculation gives us an unusable answer. So, for those cases where
             we can't check for intersection, this routine fixes the problem
             by just splicing the offending vertex into the other edge.
             This is a guaranteed solution, no matter how degenerate things get.
             Basically this is a combinatorial solution to a numerical problem.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.CheckForLeftSplice(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edge of "regUp", to make sure that the
             eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which
             destination is rightmost).
            
             Theoretically, this should always be true. However, splitting an edge
             into two pieces can change the results of previous tests. For example,
             suppose at one point we checked eUp and eLo, and decided that eUp->Dst
             is barely above eLo. Then later, we split eLo into two edges (eg. from
             a splice operation like this one). This can change the result of
             the test so that now eUp->Dst is incident to eLo, or barely below it.
             We must correct this condition to maintain the dictionary invariants
             (otherwise new edges might get inserted in the wrong place in the
             dictionary, and bad stuff will happen).
            
             We fix the problem by just splicing the offending vertex into the
             other edge.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.CheckForIntersect(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edges of the given region to see if
             they intersect. If so, create the intersection and add it
             to the data structures.
            
             Returns TRUE if adding the new intersection resulted in a recursive
             call to AddRightEdges(); in this case all "dirty" regions have been
             checked for intersections, and possibly regUp has been deleted.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.WalkDirtyRegions(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion)">
            <summary>
            When the upper or lower edge of any region changes, the region is
            marked "dirty". This routine walks through all the dirty regions
            and makes sure that the dictionary invariants are satisfied
            (see the comments at the beginning of this file). Of course
            new dirty regions can be created as we make changes to restore
            the invariants.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ConnectRightVertex(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Edge)">
             <summary>
             Purpose: connect a "right" vertex vEvent (one where all edges go left)
             to the unprocessed portion of the mesh. Since there are no right-going
             edges, two regions (one above vEvent and one below) are being merged
             into one. "regUp" is the upper of these two regions.
            
             There are two reasons for doing this (adding a right-going edge):
             - if the two regions being merged are "inside", we must add an edge
             to keep them separated (the combined region would not be monotone).
             - in any case, we must leave some record of vEvent in the dictionary,
             so that we can merge vEvent with features that we have not seen yet.
             For example, maybe there is a vertical edge which passes just to
             the right of vEvent; we would like to splice vEvent into this edge.
            
             However, we don't want to connect vEvent to just any vertex. We don''t
             want the new edge to cross any other edges; otherwise we will create
             intersection vertices even when the input data had no self-intersections.
             (This is a bad thing; if the user's input data has no intersections,
             we don't want to generate any false intersections ourselves.)
            
             Our eventual goal is to connect vEvent to the leftmost unprocessed
             vertex of the combined region (the union of regUp and regLo).
             But because of unseen vertices with all right-going edges, and also
             new vertices which may be created by edge intersections, we don''t
             know where that leftmost unprocessed vertex is. In the meantime, we
             connect vEvent to the closest vertex of either chain, and mark the region
             as "fixUpperEdge". This flag says to delete and reconnect this edge
             to the next processed vertex on the boundary of the combined region.
             Quite possibly the vertex we connected to will turn out to be the
             closest one, in which case we won''t need to make any changes.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ConnectLeftDegenerate(Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ActiveRegion,Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            The event vertex lies exacty on an already-processed edge or vertex.
            Adding the new vertex involves splicing it into the already-processed
            part of the mesh.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ConnectLeftVertex(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
             <summary>
             Purpose: connect a "left" vertex (one where both edges go right)
             to the processed portion of the mesh. Let R be the active region
             containing vEvent, and let U and L be the upper and lower edge
             chains of R. There are two possibilities:
            
             - the normal case: split R into two regions, by connecting vEvent to
             the rightmost vertex of U or L lying to the left of the sweep line
            
             - the degenerate case: if vEvent is close enough to U or L, we
             merge vEvent into that edge chain. The subcases are:
             - merging with the rightmost vertex of U or L
             - merging with the active edge of U or L
             - merging with an already-processed portion of U or L
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.SweepEvent(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Vertex)">
            <summary>
            Does everything necessary when the sweep line crosses a vertex.
            Updates the mesh and the edge dictionary.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.AddSentinel(System.Single,System.Single,System.Single)">
             <summary>
             Make the sentinel coordinates big enough that they will never be
             merged with real input features.
            
             We add two sentinel edges above and below all other edges,
             to avoid special cases at the top and bottom.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.InitEdgeDict">
            <summary>
            We maintain an ordering of edge intersections with the sweep line.
            This order is maintained in a dynamic dictionary.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.RemoveDegenerateEdges">
            <summary>
            Remove zero-length edges, and contours with fewer than 3 vertices.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.InitPriorityQ">
            <summary>
            Insert all vertices into the priority queue which determines the
            order in which vertices cross the sweep line.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.RemoveDegenerateFaces">
             <summary>
             Delete any degenerate faces with only two edges. WalkDirtyRegions()
             will catch almost all of these, but it won't catch degenerate faces
             produced by splice operations on already-processed edges.
             The two places this can happen are in FinishLeftRegions(), when
             we splice in a "temporary" edge produced by ConnectRightVertex(),
             and in CheckForLeftSplice(), where we splice already-processed
             edges to ensure that our dictionary invariants are not violated
             by numerical errors.
            
             In both these cases it is *very* dangerous to delete the offending
             edge at the time, since one of the routines further up the stack
             will sometimes be keeping a pointer to that edge.
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.ComputeInterior">
            <summary>
            ComputeInterior computes the planar arrangement specified
            by the given contours, and further subdivides this arrangement
            into regions. Each region is marked "inside" if it belongs
            to the polygon, according to the rule given by windingRule.
            Each interior region is guaranteed to be monotone.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.TessellateMonoRegion(Abt.Controls.SciChart3D.Engine2D.Tess.MeshUtils.Face)">
             <summary>
             TessellateMonoRegion( face ) tessellates a monotone region
             (what else would it do??) The region must consist of a single
             loop of half-edges (see mesh.h) oriented CCW. "Monotone" in this
             case means that any vertical line intersects the interior of the
             region in a single interval.
            
             Tessellation consists of adding interior edges (actually pairs of
             half-edges), to split the region into non-overlapping triangles.
            
             The basic idea is explained in Preparata and Shamos (which I don't
             have handy right now), although their implementation is more
             complicated than this one. The are two edge chains, an upper chain
             and a lower chain. We process all vertices from both chains in order,
             from right to left.
            
             The algorithm ensures that the following invariant holds after each
             vertex is processed: the untessellated region consists of two
             chains, where one chain (say the upper) is a single edge, and
             the other chain is concave. The left vertex of the single edge
             is always to the left of all vertices in the concave chain.
            
             Each step consists of adding the rightmost unprocessed vertex to one
             of the two chains, and forming a fan of triangles from the rightmost
             of two chain endpoints. Determining whether we can add each triangle
             to the fan is a simple orientation test. By making the fan as large
             as possible, we restore the invariant (check it yourself).
             </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.TessellateInterior">
            <summary>
            TessellateInterior( mesh ) tessellates each region of
            the mesh which is marked "inside" the polygon. Each such region
            must be monotone.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.DiscardExterior">
            <summary>
            DiscardExterior zaps (ie. sets to null) all faces
            which are not marked "inside" the polygon. Since further mesh operations
            on NULL faces are not allowed, the main purpose is to clean up the
            mesh so that exterior loops are not represented in the data structure.
            </summary>
        </member>
        <member name="M:Abt.Controls.SciChart3D.Engine2D.Tess.Tess.SetWindingNumber(System.Int32,System.Boolean)">
             <summary>
             SetWindingNumber( value, keepOnlyBoundary ) resets the
             winding numbers on all edges so that regions marked "inside" the
             polygon have a winding number of "value", and regions outside
             have a winding number of 0.
            
             If keepOnlyBoundary is TRUE, it also deletes all edges which do not
             separate an interior region from an exterior one.
             </summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Modifiers.MasterSlaveChartModifier">
            <summary>
            Provides a base class for Linked Chart Modifiers. Classes that inherit this allow mouse events and interaction to occur across Chart Panes
            </summary>
        </member>
        <member name="F:Abt.Controls.SciChart3D.Modifiers.OrbitModifier_OLD.MouseRotationSensitivityProperty">
            <summary></summary>
        </member>
        <member name="T:Abt.Controls.SciChart3D.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Abt.Controls.SciChart3D.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
